/**
 * Category Management JavaScript
 */

document.addEventListener('DOMContentLoaded', () => {
  // Initialize DataTables with basic configuration (no AJAX)
  if (typeof $.fn !== 'undefined' && $.fn.DataTable) {
    const categoriesTable = $('#categories-table').DataTable({
      dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>><"table-responsive"t><"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
      language: {
        paginate: {
          previous: '<i class="ti ti-chevron-left"></i>',
          next: '<i class="ti ti-chevron-right"></i>'
        }
      },
      // Disable server-side processing since we're not using AJAX
      serverSide: false,
      // Disable AJAX since we're using traditional form submissions
      ajax: null,
      // Disable processing indicator
      processing: false
    });
  }

  // Auto-generate slug from title
  const titleInputs = [
    { title: document.getElementById('categoryTitle'), slug: document.getElementById('slug') },
    { title: document.getElementById('categoryTitleMobile'), slug: document.getElementById('slugMobile') }
  ];

  titleInputs.forEach(pair => {
    if (pair.title && pair.slug) {
      pair.title.addEventListener('input', function () {
        if (!pair.slug.value || pair.slug.dataset.autoGenerated === 'true') {
          pair.slug.value = generateSlug(this.value);
          pair.slug.dataset.autoGenerated = 'true';
        }
      });

      pair.slug.addEventListener('input', function () {
        this.dataset.autoGenerated = 'false';
      });
    }
  });

  // Auto-generate slug from title for edit forms
  document.querySelectorAll('[id^="edit-categoryTitle-"]').forEach(titleInput => {
    const categoryId = titleInput.id.split('-').pop();
    const slugInput = document.getElementById(`edit-slug-${categoryId}`);

    if (titleInput && slugInput) {
      titleInput.addEventListener('input', function () {
        if (!slugInput.value || slugInput.dataset.autoGenerated === 'true') {
          slugInput.value = generateSlug(this.value);
          slugInput.dataset.autoGenerated = 'true';
        }
      });

      slugInput.addEventListener('input', function () {
        this.dataset.autoGenerated = 'false';
      });
    }
  });

  // Image preview functionality
  const imageInputs = document.querySelectorAll('input[type="file"][accept*="image"]');
  imageInputs.forEach(input => {
    input.addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();

        // Find the closest parent form
        const form = this.closest('form');

        // Check if there's an existing preview container
        let previewContainer = form.querySelector('.image-preview-container');

        // If no preview container exists, create one
        if (!previewContainer) {
          previewContainer = document.createElement('div');
          previewContainer.className = 'image-preview-container mt-2';
          this.parentNode.appendChild(previewContainer);
        }

        reader.onload = e => {
          previewContainer.innerHTML = `
                        <img src="${e.target.result}" class="image-preview" alt="Image Preview">
                    `;
        };

        reader.readAsDataURL(file);
      }
    });
  });

  // Auto-dismiss alerts after 5 seconds
  const alerts = document.querySelectorAll('.alert');
  alerts.forEach(alert => {
    setTimeout(() => {
      const bsAlert = new bootstrap.Alert(alert);
      bsAlert.close();
    }, 5000);
  });

  // Form validation
  const forms = document.querySelectorAll('.needs-validation');
  Array.from(forms).forEach(form => {
    form.addEventListener(
      'submit',
      event => {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      },
      false
    );
  });

  // Confirmation for delete actions
  const deleteButtons = document.querySelectorAll('.delete-btn');
  deleteButtons.forEach(button => {
    button.addEventListener('click', function (e) {
      const categoryName = this.getAttribute('data-name');
      if (categoryName) {
        document.querySelector('#deleteCategoryModal .modal-body p').innerHTML =
          `Are you sure you want to delete <strong>${categoryName}</strong>? This action cannot be undone.`;
      }
    });
  });
});

/**
 * Generate slug from text
 * @param {string} text - Text to convert to slug
 * @returns {string} - Slug
 */
function generateSlug(text) {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

/**
 * Show Bootstrap toast notification
 * @param {string} type - 'success' or 'error'
 * @param {string} message - Toast message
 */
function showToast(type, message) {
  // Create toast container if it doesn't exist
  let toastContainer = document.getElementById('toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toast-container';
    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
    document.body.appendChild(toastContainer);
  }

  // Create toast element
  const toastId = 'toast-' + Date.now();
  const toastEl = document.createElement('div');
  toastEl.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
  toastEl.id = toastId;
  toastEl.setAttribute('role', 'alert');
  toastEl.setAttribute('aria-live', 'assertive');
  toastEl.setAttribute('aria-atomic', 'true');

  toastEl.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

  toastContainer.appendChild(toastEl);

  // Initialize and show toast
  const toast = new bootstrap.Toast(toastEl, {
    autohide: true,
    delay: 5000
  });
  toast.show();

  // Remove toast element after it's hidden
  toastEl.addEventListener('hidden.bs.toast', function () {
    this.remove();
  });
}
